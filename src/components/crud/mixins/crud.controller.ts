/* eslint-disable @typescript-eslint/no-explicit-any */
import {Constructor, inject, MixinTarget} from '@loopback/core';
import {
  DefaultCrudRepository,
  Entity,
  CountSchema,
  Count,
  Model,
  Where,
  Filter,
  FilterExcludingWhere,
  Class,
  Repository,
} from '@loopback/repository';
import {
  del,
  get,
  getModelSchemaRef,
  HttpErrors,
  param,
  patch,
  post,
  put,
  requestBody,
  RestApplication,
} from '@loopback/rest';
import {
  chain,
  ControllerMixinOptions,
  getDecoratorsProperties,
} from '../../../helpers';
import {parampathFunction} from './utility';

// ModelDef : définition d'une model qui peut être exposé
export type ModelDef = Function & {prototype: any} & typeof Model;

// InjectableRepository est une union des types qui peuvent
// être utilisé pour l'obtention d'une repository
export type InjectableRepository<E extends Entity, ID> =
  | string
  | Class<Repository<Model>>
  | DefaultCrudRepository<E, ID, {}>;

export interface CrudMixinOptions {
  // nom de la ressource pour le path {basepath}/{name}
  name: string;
  // nom de la variable qui correspond a l'identifiant de l'entité
  // par default ID
  id?: string;
  // type de l'identifant
  // par default number
  idType?: string;
  // si le ID est généré automatiquement
  // par default omitId est a true
  omitId?: boolean;
}

// Optons pour un CrudControllerMixin
export interface CrudControllerMixinOptions
  extends ControllerMixinOptions,
    CrudMixinOptions {}

// Decorator to add to an operation that
// you don't wont to be enable
export function disable() {
  return (target: any, key: string, descriptor: any) => {
    descriptor.value = function () {
      throw new HttpErrors.NotExtended();
    };

    return descriptor;
  };
}

/**
 * Ajoute un CRUD Controller anonyme à partir d'un model qui possède un repository
 */
export const addCRUDController = <E extends Entity, ID>(
  app: RestApplication,
  // classe de l'Entité
  modelDef: ModelDef,
  // paramètre pour l'injection du repository avec @repository()
  repo: InjectableRepository<E, ID>,
  options: CrudControllerMixinOptions,
) => {
  const name =
    typeof repo === 'string'
      ? repo
      : repo instanceof DefaultCrudRepository
      ? 'null'
      : repo.name;

  class Test extends CrudControllerMixin<Constructor<object>, E, ID>(
    Object,
    modelDef,
    options,
  ) {
    constructor(
      @inject(`repositories.${name}`, {optional: true})
      crudRepository: DefaultCrudRepository<any, any, {}>,
    ) {
      super();
      if (!crudRepository) {
        if (repo instanceof DefaultCrudRepository) {
          crudRepository = repo as DefaultCrudRepository<any, any, {}>;
        } else {
          throw new Error('Cound not inject a repository');
        }
      }
      this.repository = crudRepository;
    }
  }

  const binding = app.controller(Test, `${options.name}Controller`);

  return binding.key;
};

/**
 *
 * CrudControllerMixin is a mixin to add all of the CrudOperation
 * to expose youre Repository with a controller. The function added
 * are the same as the default CRUD Controller generated by lb4-cli
 * @param superClass
 * @param repoEntity : Entity of the repository you will use
 * @param options : CrudControllerMixinOptions
 *
 * You must provide value for the following property added by the mixin
 * - repository : DefaultCrudRepository that will be use
 */
export function CrudControllerMixin<
  T extends MixinTarget<object>,
  E extends Entity,
  ID
>(
  superClass: T,
  repoEntity: Function & {prototype: any} & typeof Model,
  options: CrudControllerMixinOptions,
) {
  // base path for binding
  const basePath = `${options.basePath ?? ''}/${options.name}`;

  if (!options.id) options.id = 'id';
  if (!options.idType) options.idType = 'number';

  const omitId =
    options.omitId === undefined || options.omitId === true ? [options.id] : [];

  // wrap to use to correct property decorator to get id from request
  const parampath = parampathFunction(options.idType, options.id);
  class RestController extends superClass {
    repository: DefaultCrudRepository<E, ID, {}>;

    @post(basePath, {
      responses: {
        '200': {
          description: 'Create model instance',
          content: {
            'application/json': {schema: getModelSchemaRef(repoEntity)},
          },
        },
      },
    })
    @chain(...getDecoratorsProperties(options.properties))
    async create(
      @requestBody({
        content: {
          'application/json': {
            schema: getModelSchemaRef(repoEntity, {
              title: 'NewEntity',
              exclude: omitId,
            }),
          },
        },
      })
      profile: Omit<E, 'id'>,
    ): Promise<E> {
      return this.repository.create(profile as any);
    }

    @get(basePath + '/count', {
      responses: {
        '200': {
          description: 'Profile model count',
          content: {'application/json': {schema: CountSchema}},
        },
      },
    })
    @chain(...getDecoratorsProperties(options.properties))
    async count(@param.where(repoEntity) where?: Where<E>): Promise<Count> {
      return this.repository.count(where);
    }

    @get(basePath, {
      responses: {
        '200': {
          description: 'Array of Profile model instances',
          content: {
            'application/json': {
              schema: {
                type: 'array',
                items: getModelSchemaRef(repoEntity, {includeRelations: true}),
              },
            },
          },
        },
      },
    })
    @chain(...getDecoratorsProperties(options.properties))
    async find(@param.filter(repoEntity) filter?: Filter<E>): Promise<E[]> {
      return this.repository.find(filter);
    }

    @patch(basePath, {
      responses: {
        '200': {
          description: 'PATCH success count',
          content: {'application/json': {schema: CountSchema}},
        },
      },
    })
    @chain(...getDecoratorsProperties(options.properties))
    async updateAll(
      @requestBody({
        content: {
          'application/json': {
            schema: getModelSchemaRef(repoEntity, {partial: true}),
          },
        },
      })
      profile: E,
      @param.where(repoEntity) where?: Where<E>,
    ): Promise<Count> {
      return this.repository.updateAll(profile, where);
    }

    @get(basePath + '/{id}', {
      responses: {
        '200': {
          description: 'Entity model instance',
          content: {
            'application/json': {
              schema: getModelSchemaRef(repoEntity, {includeRelations: true}),
            },
          },
        },
      },
    })
    @chain(...getDecoratorsProperties(options.properties))
    async findById(
      @parampath() id: ID,
      @param.filter(repoEntity, {exclude: 'where'})
      filter?: FilterExcludingWhere<E>,
    ): Promise<E> {
      return this.repository.findById(id, filter);
    }

    @patch(basePath + '/{id}', {
      responses: {
        '204': {
          description: 'Entity PATCH success',
        },
      },
    })
    @chain(...getDecoratorsProperties(options.properties))
    async updateById(
      @param.path.string('id') id: ID,
      @requestBody({
        content: {
          'application/json': {
            schema: getModelSchemaRef(repoEntity, {partial: true}),
          },
        },
      })
      profile: E,
    ): Promise<void> {
      await this.repository.updateById(id, profile);
    }

    @put(basePath + '/{id}', {
      responses: {
        '204': {
          description: 'Profile PUT success',
        },
      },
    })
    @chain(...getDecoratorsProperties(options.properties))
    async replaceById(
      @param.path.string('id') id: ID,
      @requestBody() profile: E,
    ): Promise<void> {
      await this.repository.replaceById(id, profile);
    }

    @del(basePath + '/{id}', {
      responses: {
        '204': {
          description: 'Entity DELETE success',
        },
      },
    })
    @chain(...getDecoratorsProperties(options.properties))
    async deleteById(@param.path.string('id') id: ID): Promise<void> {
      await this.repository.deleteById(id);
    }
  }

  return RestController;
}
